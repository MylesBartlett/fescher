[tool.poetry]
name = "fescher"
version = "0.1.0"
description = "A 'fesch' package for investigating the Escherian problem of `performative prediction` (under fairness constraints)"
authors = ["Predictive Analytics Lab (PAL) <info@predictive-analytics-lab.com>"]
license = "Apache License 2.0"
packages = [{ include = "src" }]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
repository = "https://github.com/wearepal/fescher"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
seaborn = "^0.12.2"
scikit-learn = "^1.3.1"
matplotlib = "^3.8.0"
loguru = "^0.7.2"
ranzen = "^2.3.0"
dadaptation = "^3.1"
gymnasium = "^0.29.1"
polars = "^0.19.11"

[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
ruff = "^0.0.291"

[build-system]
requires = ["poetry-core"]
build-backend = "maturin"

[tool.black]
line-length = 100
target-version = ['py38']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''
[tool.ruff]
line-length = 88 # for import sorting
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    # "N", # naming
    "PLC", # pylint convention
    "PLE", # pylint error
    # "PLR", # pylint refactor
    "PLW", # pylint warning
    "PTH", # use-pathlib
    # "UP", # pyupgrade
    "W",
]
ignore = [
    "E501",    # line length
    "E721",    # `isinstance()` vs `type() == type()`
    "E741",    # ambiguous variable name
    "F541",    # f-string without placeholder
    "PLW2901", # overwriting loop variable
    "PLC0105", # covariant typevars have to end in "_co"
]
target-version = "py310"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F403"]

[tool.ruff.isort]
known-third-party = [
    "attr",
    "gymnasium",
    "hydra",
    "loguru",
    "numpy",
    "omegaconf",
    "pandas",
    "polars",
    "pytest",
    "ranzen",
    "requests",
    "seaborn",
    "sklearn",
    "torch",
    "tqdm",
]
extra-standard-library = ["typing_extensions"]
no-lines-before = ["future", "standard-library"]
force-sort-within-sections = true
split-on-trailing-comma = false
classes = ["MISSING"]
case-sensitive = true

[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.10"
reportMissingTypeArgument = "none"
reportCallInDefaultInitializer = "warning"
reportPropertyTypeMismatch = "none"
reportUninitializedInstanceVariable = "warning"
reportPrivateUsage = "none"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
# these errors are a bit annoying
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownParameterType = "none"
reportUnknownArgumentType = "none"
ignore = []

[tool.pytest.ini_options]
python_files = "*.py"
python_classes = "Test"
python_functions = "test_*"
addopts = ["--import-mode=importlib"]
# Ignore deprecation warnings coming from pytest/pkg_resources
# that pollute the console output when testing.
filterwarnings = [
    'ignore::DeprecationWarning:_pytest.*:',
    'ignore::DeprecationWarning:pkg_resources.*:',
]

[tool.maturin]
features = ["pyo3/extension-module"]
